@using BTCPayServer
@using BTCPayServer.Abstractions.Contracts
@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.Plugins.ArkPayServer
@using NBitcoin
@using NArk.Contracts
@using NArk.Services
@model BTCPayServer.Plugins.ArkPayServer.Controllers.ArkStoreWalletViewModel
@inject IScopeProvider ScopeProvider
@inject IOperatorTermsService Terms
@inject ArkConfiguration ArkConfiguration
@{
  
    Layout = "Views/UIStores/_LayoutWalletSetup";
    var terms = await Terms.GetOperatorTerms();
    var mainnet = terms.Network.ChainName == ChainName.Mainnet;
    var storeId = ScopeProvider.GetCurrentStoreId()!;
    ViewData.SetActivePage("Ark", "Arkade Payments", "Ark");
}


<h1 class="text-center mt-n2 text-center">@ViewData["Title"]</h1>


<form asp-action="SetupStore" method="post" asp-route-storeId="@storeId">
    <div>
        
        @if (!string.IsNullOrEmpty(Model.Wallet))
        {
            <div class="form-group mb-3">
                <label asp-for="Wallet" class="form-label">Wallet Id</label>
                <div class="d-sm-flex">
                    <input asp-for="Wallet" class="form-control" readonly/>
                </div>
                
            </div>
            @if (Model.Destination != null)
            {
                <div class="form-group mb-3">
                    <label asp-for="Destination" class="form-label">Destination</label>
                    <div class="d-sm-flex">
                        <input asp-for="Destination" class="form-control" readonly/>
                    </div>
                
                </div>
            }
            
        }
        else
        {
            <div class="form-group mb-3">
                <label asp-for="Wallet" class="form-label">Public Key</label>
                <div class="d-sm-flex">
                    <input asp-for="Wallet" class="form-control" placeholder="npub.."/>
                </div>


                <span asp-validation-for="Wallet" class="text-danger"></span>
                <div class="form-text">
                    Enter an nsec/npub wallet key. Entering an nsec will allow BTCPay to automatically sweep invoice payments to your wallet. 
                </div>
            </div>
            
        }
        
      
    </div>
    
    <div class="text-start mt-4">
        @if (string.IsNullOrEmpty(Model.Wallet)){
            <button  name="command" type="submit" value="create" class="btn btn-secondary   me-2" text-translate="true">
                Generate Wallet 
            </button>
            
            <button id="page-primary" name="command" type="submit" value="save" class="btn btn-primary me-2">Set</button>
        }
        else
        {
            
            @* <button id="page-primary" name="command" type="submit" value="save" class="btn btn-primary me-2">Save</button> *@
        }
        @if (!string.IsNullOrEmpty(Model.Wallet) && !Model.LNEnabled){
            <button name="command" type="submit" value="enable-ln" class="btn btn-primary me-2">Enable Lightning</button>
        }
        @if (!string.IsNullOrEmpty(Model.Wallet))
        {
            <button name="command" type="submit" value="poll-scripts" class="btn btn-outline-primary me-2">Refresh Balance</button>
            <button name="command" type="submit" value="clear" class="btn btn-outline-danger me-2">Clear</button>
      
        }
    </div>
</form>
@if (Model.Contracts?.Any() is true)
{
    <h2 class="text-center mt-5 mb-3">Contracts</h2>

    <div class="table-responsive">
        <table id="contracts" class="table table-hover">
            <thead >
            <tr>

                <th text-translate="true" class="text-nowrap">Address</th>
                <th text-translate="true" class="text-nowrap">Contract</th>
                <th text-translate="true" class="text-nowrap">Active</th>
                <th></th>
            </tr>
            </thead>

            <tbody>
            @foreach (var contract in Model.Contracts.OrderBy(x => x.Key.CreatedAt))
            {
                var arkContract = ArkContract.Parse(contract.Key.Type, contract.Key.ContractData);

                var link = $"{ArkConfiguration.ArkUri}/v1/vtxos?scripts={arkContract.GetArkAddress().ScriptPubKey.ToHex()}";
                <tr>

                    <td>
                        <vc:truncate-center link="@link" text="@arkContract.GetArkAddress().ToString(mainnet)" classes="truncate-center-id"/>
                    </td>

                    <td>
                        <vc:truncate-center text="@arkContract.ToString()" classes="truncate-center-id"/>
                    </td>
                    <td>
                        @if (contract.Key.Active)
                        {
                            <span class="text-success" text-translate="true">Active</span>
                        }
                        else
                        {
                            <span class="text-danger" text-translate="true">Inactive</span>
                        }
                    </td>
                    <td>
                        
                    </td>

                </tr>
                @if (contract.Value.Any())
                {
                    <tr class="bg-light rounded">

                        <td colspan="3" class="border-top-0">


                            <table class="table table-hover">
                                <thead>
                                <tr>
                                    <th text-translate="true">Outpoint</th>
                                    <th text-translate="true">Received Time</th>
                                    <th text-translate="true">Spent</th>

                                    <th text-translate="true" class="text-end">Amount</th>

                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var vtxo in contract.Value)
                                {
                                    var outpoint = vtxo.TransactionId + ":" + vtxo.TransactionOutputIndex;
                                    var link2 = $"{ArkConfiguration.ArkUri}/v1/vtxos?outpoints={outpoint}";

                                    <tr >
                                        <td>
                                            <vc:truncate-center link="@link2" text="@outpoint" classes="truncate-center-id"/>

                                        </td>
                                        <td>@vtxo.SeenAt.ToBrowserDate()</td>
                                        <td>
                                            @if (string.IsNullOrEmpty(vtxo.SpentByTransactionId))
                                            {
                                                <span class="text-success" text-translate="true">Unspent</span>
                                            }
                                            else
                                            {
                                                <span class="text-danger" text-translate="true">Spent</span>
                                            }
                                        </td>

                                        <td class="payment-value text-end text-nowrap">
                                            <span data-sensitive class="text-success">@vtxo.Amount sats</span>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>


                        </td>
                    </tr>
                }
                @if(contract.Key.Swaps.Any())
                {
                    <tr>
                        <td colspan="3" class="border-top-0">
                            <table class="table table-hover">
                                <thead>
                                <tr>
                                    <th text-translate="true">Swap</th>
                                    <th text-translate="true">Status</th>
                                    <th text-translate="true">Invoice</th>
                                    
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var swap in contract.Key.Swaps)
                                {
                                    <tr>
                                        <td>
                                            @swap.SwapId
                                        </td>
                                        <td>
                                            @swap.Status
                                        </td>
                                        <td>
                                            <vc:truncate-center text="@swap.Invoice.ToString()" classes="truncate-center-id"/>

                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>
}