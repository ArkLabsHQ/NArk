@using BTCPayServer.Abstractions.Contracts
@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.Plugins.ArkPayServer
@using BTCPayServer.Plugins.ArkPayServer.Data.Entities
@using BTCPayServer.Plugins.ArkPayServer.Helpers
@using NArk.Services.Abstractions
@using NBitcoin
@using NArk.Contracts
@model BTCPayServer.Plugins.ArkPayServer.Models.StoreContractsViewModel
@inject IScopeProvider ScopeProvider
@inject IOperatorTermsService Terms
@inject ArkConfiguration ArkConfiguration
@{
    Layout = "_Layout";
    ViewData.SetActivePage(category: "Ark", activePage: "Contracts", title: "Ark - Contracts");
    var storeId = ScopeProvider.GetCurrentStoreId();
    var mainnet = true;
    try
    {
        var terms = await Terms.GetOperatorTerms();
        mainnet = terms.Network.ChainName == ChainName.Mainnet;
    }
    catch (Exception ex)
    {
    }
    
    var statusFilterCount = Model.Search?.ContainsFilter("status") == true ? Model.Search.GetFilterArray("status").Length : 0;
}

@functions
{
    private bool HasArrayFilter(string type, string key = null) =>
        Model.Search?.ContainsFilter(type) == true && (key is null || Model.Search.GetFilterArray(type).Contains(key));
}

@section PageHeadContent
{
    <style>
        .contract-details-row > td {
            padding: 1.5rem 1rem 0 2.65rem;
        }
        .dropdown > .btn {
            min-width: 7rem;
            padding-left: 1rem;
            text-align: left;
        }
        #SearchText {
            flex-shrink: 0;
            min-width: 200px;
            max-width: 300px;
        }
        @@media (max-width: 568px) {
            #SearchText {
                width: 100%;
            }
        }
        .htlc-countdown {
            font-size: 0.875rem;
            color: #6c757d;
        }
        .htlc-countdown.expired {
            color: #dc3545;
            font-weight: 500;
        }
        .htlc-countdown.active {
            color: #0d6efd;
        }
    </style>
}

<div class="sticky-header">
    <h2>
        <span>@ViewData["Title"]</span>
        <a href="#descriptor" data-bs-toggle="collapse">
            <vc:icon symbol="info" />
        </a>
    </h2>
    @if (Model.CanManageContracts)
    {
        <div>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#importContractModal">
                <vc:icon symbol="add" /> Import Contract
            </button>
        </div>
    }
</div>

<div id="descriptor" class="collapse">
    <div class="d-flex px-4 py-4 mb-4 bg-tile rounded">
        <div class="flex-fill">
            <p text-translate="true" class="mb-2">Contracts are Ark payment addresses that can receive VTXOs.</p>
            <p text-translate="true" class="mb-3">Each contract represents a unique payment destination secured by your wallet.</p>
        </div>
        <button type="button" class="btn-close ms-auto" data-bs-toggle="collapse" data-bs-target="#descriptor" aria-expanded="false" aria-label="Close">
            <vc:icon symbol="close" />
        </button>
    </div>
</div>

<partial name="_StatusMessage" />

@if (Model.Debug)
{
    <div class="alert alert-info d-flex align-items-center gap-2 mb-4">
        <vc:icon symbol="info" />
        <div>
            <strong>Debug Mode Active</strong> - Showing cache status.<br/>
            Tracked contracts cache: <strong>@Model.CachedContractScripts.Count</strong> active contracts<br/>
            Boltz swaps cache: <strong>@Model.CachedSwapScripts.Count</strong> active swaps
        </div>
    </div>
}

<form class="d-flex flex-wrap flex-sm-nowrap align-items-center gap-3 mb-4 col-xxl-8" asp-action="Contracts" asp-route-storeId="@Model.StoreId" method="get">
    <input asp-for="Count" type="hidden" />
    <input asp-for="SearchTerm" type="hidden" value="@(Model.Search?.WithoutSearchText() ?? "")"/>
    <input asp-for="SearchText" class="form-control" placeholder="Searchâ€¦" />
    
    <div class="dropdown">
        <button id="StatusOptionsToggle" class="btn btn-secondary dropdown-toggle dropdown-toggle-custom-caret" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            @if (statusFilterCount > 0)
            {
                <span>@statusFilterCount Status</span>
            }
            else
            {
                <span text-translate="true">All Status</span>
            }
        </button>
        <div class="dropdown-menu" aria-labelledby="StatusOptionsToggle">
            <a asp-action="Contracts" asp-route-storeId="@Model.StoreId" asp-route-count="@Model.Count" asp-route-searchTerm="@(Model.Search?.Toggle("status", "active") ?? "")" class="dropdown-item @(HasArrayFilter("status", "active") ? "custom-active" : "")" text-translate="true">Active</a>
            <a asp-action="Contracts" asp-route-storeId="@Model.StoreId" asp-route-count="@Model.Count" asp-route-searchTerm="@(Model.Search?.Toggle("status", "inactive") ?? "")" class="dropdown-item @(HasArrayFilter("status", "inactive") ? "custom-active" : "")" text-translate="true">Inactive</a>
        </div>
    </div>
    
    @if (statusFilterCount > 0 || !string.IsNullOrEmpty(Model.SearchText))
    {
        <button id="clearAllFiltersBtn" type="button" class="btn btn-secondary" style="min-width: 7rem;" title="Clear all filters">
            <span class="align-middle" text-translate="true">Clear All</span>
        </button>
    }
</form>

<partial name="_ClearFiltersScript" />

@if (Model.Contracts.Any())
{
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th class="date-col">
                        <div class="d-flex align-items-center gap-1">
                            <span text-translate="true">Created</span>
                            <button type="button" class="btn btn-link p-0 switch-time-format only-for-js" title="Switch date format">
                                <vc:icon symbol="time" />
                            </button>
                        </div>
                    </th>
                    <th text-translate="true" class="text-nowrap">Address</th>
                    <th text-translate="true" class="text-nowrap">Contract Type</th>
                    <th text-translate="true" class="text-nowrap">Contract Data</th>
                    
                    
                    <th text-translate="true">Status</th>
                    <th text-translate="true">VTXOs</th>
                    <th text-translate="true">Swaps</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var contract in Model.Contracts)
                {
                    var arkContract = ArkContract.Parse(contract.Type, contract.ContractData);
                    if (arkContract is null) continue;
                    var link = ArkadeLinkHelper.GetIndexerLinkForContract(ArkConfiguration.ArkUri, arkContract);
                    var detailsId = $"contract_details_{contract.Script.GetHashCode()}";

                    BTCPayServer.Plugins.ArkPayServer.Data.Entities.VTXO[]? vtxos = [];
                    var hasVtxos = Model.ContractVtxos.TryGetValue(contract.Script, out vtxos) && vtxos.Any();
                    var hasUnspentVtxos = hasVtxos && vtxos.Any(v => v.SpentByTransactionId == null);
                    var hasRecoverableVtxos = hasVtxos && vtxos.Any(v => v.Recoverable || v.SpentByTransactionId == null);
                    
                    ArkSwap[]? swaps = [];
                    var hasSwaps = Model.ContractSwaps.TryGetValue(contract.Script, out swaps) && swaps.Any();

                    <tr id="contract_@contract.Script.GetHashCode()">
                        <td class="align-middle date-col">@contract.CreatedAt.ToBrowserDate()</td>
                        <td class="align-middle">
                            <vc:truncate-center link="@link" text="@arkContract.GetArkAddress().ToString(mainnet)" classes="truncate-center-id"/>
                        </td>
                        <td class="align-middle">
                            <vc:truncate-center text="@contract.Type" classes="truncate-center-id"/>
                            @if (arkContract is VHTLCContract htlcContract && hasRecoverableVtxos)
                            {
                                <div class="htlc-countdown mt-1" data-locktime="@htlcContract.RefundLocktime.Value" data-is-timelock="@htlcContract.RefundLocktime.IsTimeLock.ToString().ToLower()">
                                    <small>Refund: <span class="countdown-value">calculating...</span></small>
                                </div>
                            }
                        </td>
                        <td class="align-middle">
                            <vc:truncate-center text="@arkContract.ToString()" classes="truncate-center-id"/>
                        </td>
                        <td class="align-middle">
                            @if (contract.Active)
                            {
                                <span class="badge text-bg-success">Active</span>
                                @if (Model.Debug && Model.CachedContractScripts.Contains(contract.Script))
                                {
                                    <span class="badge text-bg-info ms-1" title="In tracked contracts cache">ðŸ“Œ</span>
                                }
                            }
                            else
                            {
                                <span class="badge text-bg-secondary">Inactive</span>
                            }
                        </td>
                        <td class="align-middle">
                            @if (hasUnspentVtxos)
                            {
                                <span class="badge text-bg-success">@vtxos.Length</span>
                            }
                            else if (hasVtxos)
                            {
                                <span class="badge text-bg-secondary">@vtxos.Length</span>
                            }
                            else
                            {
                                <span class="text-muted">0</span>
                            }
                        </td>
                        <td class="align-middle">
                            @if (hasSwaps)
                            {
                                <span class="badge text-bg-warning">@swaps.Length</span>
                                @if (Model.Debug && Model.CachedSwapScripts.Contains(contract.Script))
                                {
                                    <span class="badge text-bg-info ms-1" title="In active swaps cache">ðŸ“Œ</span>
                                }
                            }
                            else
                            {
                                <span class="text-muted">0</span>
                            }
                        </td>
                        <td class="align-middle text-end">
                            <div class="d-inline-flex align-items-center gap-2">
                                <form asp-action="SyncContract" method="post" asp-route-storeId="@storeId" asp-route-script="@contract.Script" class="d-inline">
                                    <button type="submit" class="btn btn-link p-0 text-secondary" title="Refresh contract data from the Ark operator" data-bs-toggle="tooltip">
                                        <vc:icon symbol="actions-refresh" />
                                    </button>
                                </form>
                                @if (hasVtxos || hasSwaps)
                                {
                                    <button class="accordion-button collapsed only-for-js ms-0 d-inline-block" type="button" data-bs-toggle="collapse" data-bs-target="#@detailsId" aria-expanded="false" aria-controls="@detailsId">
                                        <vc:icon symbol="caret-down" />
                                    </button>
                                }
                                @if (Model.CanManageContracts)
                                {
                                    <button type="button" class="btn btn-link p-0 text-danger" title="Delete contract" data-bs-toggle="modal" data-bs-target="#deleteContractModal_@contract.Script.GetHashCode()">
                                        <vc:icon symbol="cross" />
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                    
                    @if (hasVtxos || hasSwaps)
                    {
                        var colspanCount = 7;
                        <tr id="@detailsId" class="contract-details-row collapse">
                            <td colspan="@colspanCount" class="border-top-0">
                                @if (hasVtxos)
                                {
                                    <h6 class="mb-3">VTXOs</h6>
                                    <div class="mb-4">
                                        <partial name="_VtxoTable" model="vtxos" view-data='new ViewDataDictionary(ViewData) { { "ShowLinks", true }, { "UseTimeAgo", true }, { "TimeColumnLabel", "Seen" } }' />
                                    </div>
                                }
                                
                                @if (hasSwaps)
                                {
                                    <h6 class="mb-3">Swaps</h6>
                                    <partial name="_SwapTable" model="swaps" view-data='new ViewDataDictionary(ViewData) { { "UseTimeAgo", true }, { "TimeColumnLabel", "Created" } }' />
                                }
                            </td>
                        </tr>
                    }
                    
                    @* Delete Contract Modal *@
                    @if (Model.CanManageContracts)
                    {
                        <div class="modal fade" id="deleteContractModal_@contract.Script.GetHashCode()" tabindex="-1" aria-labelledby="deleteContractModalLabel_@contract.Script.GetHashCode()" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="deleteContractModalLabel_@contract.Script.GetHashCode()">
                                            <vc:icon symbol="warning" /> Delete Contract
                                        </h5>
                                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <form asp-action="DeleteContract" method="post" asp-route-storeId="@storeId" asp-route-script="@contract.Script">
                                        <div class="modal-body">
                                            <div class="alert alert-danger">
                                                <strong>Warning:</strong> This action cannot be undone.
                                            </div>
                                            <p class="mb-3">Are you sure you want to delete this contract?</p>
                                            <div class="mb-3">
                                                <label class="text-muted small">Contract Address</label>
                                                <div class="font-monospace small text-break">@arkContract.GetArkAddress().ToString(mainnet)</div>
                                            </div>
                                            <div class="mb-3">
                                                <label class="text-muted small">Contract Type</label>
                                                <div>@contract.Type</div>
                                            </div>
                                            if (hasSwaps)
                                            {
                                                <div class="alert alert-info">
                                                    <strong>Note:</strong> This contract has swap history. Deleting will remove all swap records.
                                                </div>
                                            }
                                            <p class="text-muted mb-0">
                                                Deleting this contract will remove it from your wallet. This action cannot be undone.
                                            </p>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                            <button type="submit" class="btn btn-danger">Delete Contract</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    }
                }
            </tbody>
        </table>
    </div>

    <vc:pager view-model="Model" />
}
else
{
    <p class="text-secondary mt-3" text-translate="true">
        There are no contracts matching your criteria.
    </p>
}

@* Import Contract Modal *@
@if (Model.CanManageContracts)
{
    <div class="modal fade" id="importContractModal" tabindex="-1" aria-labelledby="importContractModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="importContractModalLabel">
                        <vc:icon symbol="add" /> Import Contract
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="ImportContract" method="post" asp-route-storeId="@Model.StoreId">
                    <div class="modal-body">
                        <div class="alert alert-info">
                            <strong>Info:</strong> Import an existing Ark contract to track its VTXOs and swaps.
                        </div>
                        <div class="form-group mb-3">
                            <label class="form-label">Contract String</label>
                            <input type="text" name="contractString" class="form-control font-monospace" 
                                   placeholder="e.g., vhtlc:hash160:preimage123..." 
                                   required />
                            <div class="form-text">
                                Enter the contract string in the format: <code>type:data</code>
                            </div>
                        </div>
                        <div class="alert alert-warning">
                            <strong>Note:</strong> Make sure you have the private key for this contract to spend its VTXOs.
                        </div>
                        <p class="text-muted mb-0">
                            The contract will be added to your wallet and synced with the Ark operator to detect any existing VTXOs.
                        </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Import Contract</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

<partial name="_HtlcCountdownScript" />
