@using BTCPayServer.Components.TruncateCenter
@using BTCPayServer.Abstractions.TagHelpers
@using BTCPayServer.Plugins.ArkPayServer
@model BTCPayServer.Models.InvoicingModels.CheckoutModel

<template id="@ArkadePlugin.CheckoutBodyComponentName">
    <div class="payment-box">
        <div v-if="model.invoiceBitcoinUrlQR" class="qr-container clipboard-button" :data-qr-value="model.invoiceBitcoinUrlQR" :data-clipboard="model.invoiceBitcoinUrl" data-clipboard-confirm-element="#Address_@Model.PaymentMethodId [data-clipboard]">
            <div>
                <qrcode :value="model.invoiceBitcoinUrlQR" tag="div" :options="qrOptions" />
            </div>
            <img class="qr-icon" :src="model.cryptoImage" :alt="model.paymentMethodName"/>
        </div>
        <div v-if="model.address" class="input-group mt-3">
            <div class="form-floating" id="ArkAddress_@Model.PaymentMethodId">
                <vc:truncate-center text="model.address" is-vue="true" padding="15" elastic="true" classes="form-control-plaintext" />
                <label>Ark Address</label>
            </div>
        </div>
        <div v-if="onchainAddress" class="input-group mt-3">
            <div class="form-floating" id="OnchainAddress_@Model.PaymentMethodId">
                <vc:truncate-center text="onchainAddress" is-vue="true" padding="15" elastic="true" classes="form-control-plaintext" />
                <label>Bitcoin Address</label>
            </div>
        </div>
        <div v-if="lightning" class="input-group mt-3">
            <div class="form-floating" id="Lightning_@Model.PaymentMethodId">
                <vc:truncate-center text="lightning" is-vue="true" padding="15" elastic="true" classes="form-control-plaintext" />
                <label v-t="'lightning'"></label>
            </div>
        </div>
        <a v-if="model.invoiceBitcoinUrl && model.showPayInWalletButton" class="btn btn-primary rounded-pill w-100 mt-4" id="PayInWallet" target="_blank"
           :href="model.invoiceBitcoinUrl" :title="$t('Arkade payment link')" v-t="'pay_in_wallet'"></a>
        
        <!-- NFC Support baked in -->
        <div v-if="nfcDisplay" class="mt-4" id="NFC">
            <div v-if="nfcErrorMessage" class="alert alert-danger" v-text="nfcErrorMessage"></div>
            <div v-if="nfcWarningMessage" class="alert alert-warning" v-text="nfcWarningMessage"></div>
            <button class="btn btn-secondary rounded-pill w-100" type="button" id="PayByNFC"
                    :disabled="nfcScanning || nfcSubmitting" v-on:click="handleNfcClick">{{nfcBtnText}}</button>
        </div>
    </div>
</template>

<script>
	Vue.component(@Safe.Json(ArkadePlugin.CheckoutBodyComponentName), {
		props: ['model', 'nfcSupported', 'nfcScanning', 'nfcErrorMessage', 'nfcWarningMessage'],
		template: @Safe.Json("#" + ArkadePlugin.CheckoutBodyComponentName),
        components: {
            qrcode: VueQrcode
        },
        data () {
            return {
                currentTab: undefined,
                nfcUrl: @Safe.Json(Url.ActionAbsolute(Context.Request, "SubmitLNURLWithdrawForInvoice", "NFC").ToString()),
                nfcAmount: 0,
                nfcSubmitting: false
            };
        },
        computed: {
            onchainAddress () {
                // Extract onchain address from bitcoin: URI (bitcoin:ADDRESS?...)
                const match = this.model.invoiceBitcoinUrl?.match(/^bitcoin:([a-zA-Z0-9]+)/i);
                return match ? match[1] : null;
            },
            lightning () {
                const match = this.model.invoiceBitcoinUrl?.match(/[&?]lightning=(.*)&?/i);
                return match ? match[1].toLowerCase() : null;
            },
            nfcDisplay () {
                // Enable NFC for ARKADE payment method
                const isArkade = this.model.paymentMethodId === 'ARKADE';
                const hasLightning = !!this.lightning;
                return isArkade && hasLightning && (this.nfcSupported || this.nfcTestFallback);
            },
            nfcTestFallback () {
                return !this.nfcSupported && window.location.search.match('lnurlwtest=(1|true)');
            },
            nfcBtnText () {
                if (this.nfcSupported) {
                    if (this.nfcSubmitting) {
                        return this.$t('submitting_nfc');
                    } else if (this.nfcScanning) {
                        return this.$t('scanning_nfc');
                    } else {
                        return this.$t('pay_by_nfc');
                    }
                } else {
                    return this.$t('pay_by_lnurl');
                }
            }
        },
        beforeMount () {
            this.$root.$on('read-nfc-data', this.sendNfcData);
        },
        beforeDestroy () {
            this.$root.$off('read-nfc-data', this.sendNfcData);
        },
        methods: {
            async handleNfcClick () {
                if (this.nfcSupported) {
                    this.$emit('start-nfc-scan');
                } else {
                    if (this.model.isUnsetTopUp) {
                        this.handleUnsetTopUp();
                        if (!this.nfcAmount) {
                            return;
                        }
                    }
                    const lnurl = prompt("Enter LNURL-Withdraw");
                    if (lnurl) {
                        await this.sendNfcData(lnurl);
                    }
                }
            },
            handleUnsetTopUp () {
                const amountStr = prompt("How many sats do you want to pay?");
                if (amountStr) {
                    try {
                        this.nfcAmount = parseInt(amountStr);
                    } catch {
                        alert("Please provide a valid number amount in sats");
                    }
                }
                return false;
            },
            async sendNfcData (data) {
                this.nfcSubmitting = true;
                this.$emit('handle-nfc-data');

                // Post LNURL-Withdraw data to server
                const body = JSON.stringify({ lnurl: data, invoiceId: this.model.invoiceId, amount: this.nfcAmount });
                const opts = { method: 'POST', headers: { 'Content-Type': 'application/json' }, body };
                const response = await fetch(this.nfcUrl, opts);

                // Handle response
                try {
                    const result = await response.text();
                    const action = response.ok ? 'handle-nfc-result' : 'handle-nfc-error';
                    this.$emit(action, result);
                } catch (error) {
                    this.$emit('handle-nfc-error', error);
                }
                this.nfcSubmitting = false;
            }
        }
    });
</script>
