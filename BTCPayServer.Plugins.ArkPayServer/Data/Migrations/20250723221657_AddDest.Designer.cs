// <auto-generated />
using System;
using BTCPayServer.Plugins.ArkPayServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BTCPayServer.Plugins.ArkPayServer.Data.Migrations
{
    [DbContext(typeof(ArkPluginDbContext))]
    [Migration("20250723221657_AddDest")]
    partial class AddDest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("BTCPayServer.Plugins.Ark")
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkSwap", b =>
                {
                    b.Property<string>("SwapId")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.Property<string>("ContractScript")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ExpectedAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Invoice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SwapType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SwapId", "WalletId");

                    b.HasIndex("WalletId");

                    b.HasIndex("ContractScript", "WalletId");

                    b.ToTable("Swaps", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Wallet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WalletDestination")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Wallet")
                        .IsUnique();

                    b.ToTable("Wallets", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWalletContract", b =>
                {
                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ContractData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Script", "WalletId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletContracts", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.VTXO", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.Property<int>("TransactionOutputIndex")
                        .HasColumnType("integer");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsNote")
                        .HasColumnType("boolean");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("SeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpentByTransactionId")
                        .HasColumnType("text");

                    b.HasKey("TransactionId", "TransactionOutputIndex");

                    b.ToTable("Vtxos", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkSwap", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWallet", "Wallet")
                        .WithMany("Swaps")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWalletContract", "Contract")
                        .WithMany("Swaps")
                        .HasForeignKey("ContractScript", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWalletContract", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWallet", "Wallet")
                        .WithMany("Contracts")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWallet", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Swaps");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWalletContract", b =>
                {
                    b.Navigation("Swaps");
                });
#pragma warning restore 612, 618
        }
    }
}
