// <auto-generated />
using System;
using System.Collections.Generic;
using BTCPayServer.Plugins.ArkPayServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BTCPayServer.Plugins.ArkPayServer.Data.Migrations
{
    [DbContext(typeof(ArkPluginDbContext))]
    partial class ArkPluginDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("BTCPayServer.Plugins.Ark")
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.ArkStoredTransaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.Property<string>("Psbt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.ArkWallet", b =>
                {
                    b.Property<string>("DescriptorTemplate")
                        .HasColumnType("text");

                    b.Property<long>("CurrentIndex")
                        .HasColumnType("bigint");

                    b.HasKey("DescriptorTemplate");

                    b.ToTable("Wallets", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.ArkWalletContract", b =>
                {
                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Dictionary<string, string>>("ContractData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("DescriptorTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VTXOTransactionId")
                        .HasColumnType("text");

                    b.Property<int?>("VTXOTransactionOutputIndex")
                        .HasColumnType("integer");

                    b.HasKey("Script");

                    b.HasIndex("DescriptorTemplate");

                    b.HasIndex("VTXOTransactionId", "VTXOTransactionOutputIndex");

                    b.ToTable("WalletContracts", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.VTXO", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.Property<int>("TransactionOutputIndex")
                        .HasColumnType("integer");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("SeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SpentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpentByTransactionId")
                        .HasColumnType("text");

                    b.Property<int?>("SpentByTransactionIdInputIndex")
                        .HasColumnType("integer");

                    b.HasKey("TransactionId", "TransactionOutputIndex");

                    b.HasIndex("SpentByTransactionId");

                    b.ToTable("Vtxos", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.ArkWalletContract", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.ArkPayServer.ArkWallet", null)
                        .WithMany("Contracts")
                        .HasForeignKey("DescriptorTemplate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BTCPayServer.Plugins.ArkPayServer.VTXO", null)
                        .WithMany("WalletContracts")
                        .HasForeignKey("VTXOTransactionId", "VTXOTransactionOutputIndex");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.VTXO", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.ArkPayServer.ArkStoredTransaction", "SpentByTransaction")
                        .WithMany("SpentVtxos")
                        .HasForeignKey("SpentByTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BTCPayServer.Plugins.ArkPayServer.ArkStoredTransaction", "CreatedByTransaction")
                        .WithMany("CreatedVtxos")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByTransaction");

                    b.Navigation("SpentByTransaction");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.ArkStoredTransaction", b =>
                {
                    b.Navigation("CreatedVtxos");

                    b.Navigation("SpentVtxos");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.ArkWallet", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.VTXO", b =>
                {
                    b.Navigation("WalletContracts");
                });
#pragma warning restore 612, 618
        }
    }
}
