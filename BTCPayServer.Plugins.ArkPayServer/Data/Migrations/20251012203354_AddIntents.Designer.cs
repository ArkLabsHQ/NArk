// <auto-generated />
using System;
using BTCPayServer.Plugins.ArkPayServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BTCPayServer.Plugins.ArkPayServer.Data.Migrations
{
    [DbContext(typeof(ArkPluginDbContext))]
    [Migration("20251012203354_AddIntents")]
    partial class AddIntents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("BTCPayServer.Plugins.Ark")
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.ArkIntent", b =>
                {
                    b.Property<int>("InternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InternalId"));

                    b.Property<string>("BatchId")
                        .HasColumnType("text");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text");

                    b.Property<string>("CommitmentTransactionId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteProof")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeleteProofMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IntentId")
                        .HasColumnType("text");

                    b.Property<string[]>("PartialForfeits")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("RegisterProof")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegisterProofMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("InternalId");

                    b.HasIndex("IntentId")
                        .IsUnique()
                        .HasFilter("\"IntentId\" IS NOT NULL");

                    b.ToTable("Intents", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.ArkIntentVtxo", b =>
                {
                    b.Property<int>("InternalId")
                        .HasColumnType("integer");

                    b.Property<string>("VtxoTransactionId")
                        .HasColumnType("text");

                    b.Property<int>("VtxoTransactionOutputIndex")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LinkedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("InternalId", "VtxoTransactionId", "VtxoTransactionOutputIndex");

                    b.HasIndex("VtxoTransactionId", "VtxoTransactionOutputIndex");

                    b.ToTable("IntentVtxos", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkSwap", b =>
                {
                    b.Property<string>("SwapId")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.Property<string>("ContractScript")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ExpectedAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Invoice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SwapType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SwapId", "WalletId");

                    b.HasIndex("WalletId");

                    b.HasIndex("ContractScript", "WalletId");

                    b.ToTable("Swaps", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("IntentSchedulingPolicy")
                        .HasColumnType("text");

                    b.Property<string>("Wallet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WalletDestination")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Wallet")
                        .IsUnique();

                    b.ToTable("Wallets", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWalletContract", b =>
                {
                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ContractData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Script", "WalletId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletContracts", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.VTXO", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.Property<int>("TransactionOutputIndex")
                        .HasColumnType("integer");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Recoverable")
                        .HasColumnType("boolean");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("SeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpentByTransactionId")
                        .HasColumnType("text");

                    b.HasKey("TransactionId", "TransactionOutputIndex");

                    b.ToTable("Vtxos", "BTCPayServer.Plugins.Ark");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.ArkIntentVtxo", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.ArkPayServer.Data.ArkIntent", "Intent")
                        .WithMany("IntentVtxos")
                        .HasForeignKey("InternalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BTCPayServer.Plugins.ArkPayServer.Data.Entities.VTXO", "Vtxo")
                        .WithMany("IntentVtxos")
                        .HasForeignKey("VtxoTransactionId", "VtxoTransactionOutputIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intent");

                    b.Navigation("Vtxo");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkSwap", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWallet", "Wallet")
                        .WithMany("Swaps")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWalletContract", "Contract")
                        .WithMany("Swaps")
                        .HasForeignKey("ContractScript", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWalletContract", b =>
                {
                    b.HasOne("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWallet", "Wallet")
                        .WithMany("Contracts")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.ArkIntent", b =>
                {
                    b.Navigation("IntentVtxos");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWallet", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Swaps");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.ArkWalletContract", b =>
                {
                    b.Navigation("Swaps");
                });

            modelBuilder.Entity("BTCPayServer.Plugins.ArkPayServer.Data.Entities.VTXO", b =>
                {
                    b.Navigation("IntentVtxos");
                });
#pragma warning restore 612, 618
        }
    }
}
